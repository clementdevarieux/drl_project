import numpy as np
import random
from itertools import product

NUM_DICE_VALUE_ONE_HOT = 36
NUM_DICE_SAVED_ONE_HOT = 12
NUM_DICE = 6
NUM_STATE_FEATURES = NUM_DICE_VALUE_ONE_HOT + NUM_DICE_SAVED_ONE_HOT + 3

class Player_v4:

    def __init__(self, player_id):
        self.score = 0.0
        self.potential_score = 0.0
        self.player = player_id

    def reset(self):
        self.score = 0.0
        self.potential_score = 0.0

    def add_potential_score(self, points):
        self.potential_score += points

    def add_score(self):
        self.score += self.potential_score


def calculate_available_actions_mask(dice_count, dices_values_without_saved_dices):
    available_actions_vec = []
    available_actions_mask = np.array([])
    # dice_count =  [0, 1, 3, 0, 1, 1]
    for i, value in enumerate(dice_count):
        if value > 2 or ((i == 0 or i == 4) and value >= 1):
            available_actions_vec.append(i + 1)
            # available_actions_vec = [3, 5]

    for i, value in enumerate(dices_values_without_saved_dices):
        if value in available_actions_vec:
            if value == 1 or value == 5:
                available_actions_mask = np.append(available_actions_mask, [1])
            else:
                available_actions_mask = np.append(available_actions_mask, [2])
        else:
            available_actions_mask = np.append(available_actions_mask, [0])
    # print("calculate_available_actions_mask", available_actions_mask)
    return available_actions_mask


class Farkle_v4:

    def __init__(self):
        self.dices_values = np.zeros(NUM_DICE, dtype=int)
        self.saved_dice = np.zeros(NUM_DICE, dtype=int)
        self.player_1 = Player_v4(0)
        self.player_2 = Player_v4(1)
        self.player_turn = random.randint(0, 1)
        self.is_game_over = False
        self.reward = 0.0
        self.scoring_rules = {
            (1, 1): 0.01,
            (1, 2): 0.02,
            (1, 3): 0.1,
            (1, 4): 0.2,
            (1, 5): 0.4,
            (1, 6): 0.8,
            (2, 3): 0.02,
            (2, 4): 0.04,
            (2, 5): 0.08,
            (2, 6): 0.16,
            (3, 3): 0.03,
            (3, 4): 0.06,
            (3, 5): 0.12,
            (3, 6): 0.24,
            (4, 3): 0.04,
            (4, 4): 0.08,
            (4, 5): 0.16,
            (4, 6): 0.32,
            (5, 1): 0.005,
            (5, 2): 0.01,
            (5, 3): 0.05,
            (5, 4): 0.1,
            (5, 5): 0.2,
            (5, 6): 0.4,
            (6, 3): 0.06,
            (6, 4): 0.12,
            (6, 5): 0.24,
            (6, 6): 0.48
        }
        self.actions_dict = {
            0: [0, 0, 0, 0, 0, 0, 0],
            1: [1, 0, 0, 0, 0, 0, 0],
            2: [0, 1, 0, 0, 0, 0, 0],
            3: [1, 1, 0, 0, 0, 0, 0],
            4: [0, 0, 1, 0, 0, 0, 0],
            5: [1, 0, 1, 0, 0, 0, 0],
            6: [0, 1, 1, 0, 0, 0, 0],
            7: [1, 1, 1, 0, 0, 0, 0],
            8: [0, 0, 0, 1, 0, 0, 0],
            9: [1, 0, 0, 1, 0, 0, 0],
            10: [0, 1, 0, 1, 0, 0, 0],
            11: [1, 1, 0, 1, 0, 0, 0],
            12: [0, 0, 1, 1, 0, 0, 0],
            13: [1, 0, 1, 1, 0, 0, 0],
            14: [0, 1, 1, 1, 0, 0, 0],
            15: [1, 1, 1, 1, 0, 0, 0],
            16: [0, 0, 0, 0, 1, 0, 0],
            17: [1, 0, 0, 0, 1, 0, 0],
            18: [0, 1, 0, 0, 1, 0, 0],
            19: [1, 1, 0, 0, 1, 0, 0],
            20: [0, 0, 1, 0, 1, 0, 0],
            21: [1, 0, 1, 0, 1, 0, 0],
            22: [0, 1, 1, 0, 1, 0, 0],
            23: [1, 1, 1, 0, 1, 0, 0],
            24: [0, 0, 0, 1, 1, 0, 0],
            25: [1, 0, 0, 1, 1, 0, 0],
            26: [0, 1, 0, 1, 1, 0, 0],
            27: [1, 1, 0, 1, 1, 0, 0],
            28: [0, 0, 1, 1, 1, 0, 0],
            29: [1, 0, 1, 1, 1, 0, 0],
            30: [0, 1, 1, 1, 1, 0, 0],
            31: [1, 1, 1, 1, 1, 0, 0],
            32: [0, 0, 0, 0, 0, 1, 0],
            33: [1, 0, 0, 0, 0, 1, 0],
            34: [0, 1, 0, 0, 0, 1, 0],
            35: [1, 1, 0, 0, 0, 1, 0],
            36: [0, 0, 1, 0, 0, 1, 0],
            37: [1, 0, 1, 0, 0, 1, 0],
            38: [0, 1, 1, 0, 0, 1, 0],
            39: [1, 1, 1, 0, 0, 1, 0],
            40: [0, 0, 0, 1, 0, 1, 0],
            41: [1, 0, 0, 1, 0, 1, 0],
            42: [0, 1, 0, 1, 0, 1, 0],
            43: [1, 1, 0, 1, 0, 1, 0],
            44: [0, 0, 1, 1, 0, 1, 0],
            45: [1, 0, 1, 1, 0, 1, 0],
            46: [0, 1, 1, 1, 0, 1, 0],
            47: [1, 1, 1, 1, 0, 1, 0],
            48: [0, 0, 0, 0, 1, 1, 0],
            49: [1, 0, 0, 0, 1, 1, 0],
            50: [0, 1, 0, 0, 1, 1, 0],
            51: [1, 1, 0, 0, 1, 1, 0],
            52: [0, 0, 1, 0, 1, 1, 0],
            53: [1, 0, 1, 0, 1, 1, 0],
            54: [0, 1, 1, 0, 1, 1, 0],
            55: [1, 1, 1, 0, 1, 1, 0],
            56: [0, 0, 0, 1, 1, 1, 0],
            57: [1, 0, 0, 1, 1, 1, 0],
            58: [0, 1, 0, 1, 1, 1, 0],
            59: [1, 1, 0, 1, 1, 1, 0],
            60: [0, 0, 1, 1, 1, 1, 0],
            61: [1, 0, 1, 1, 1, 1, 0],
            62: [0, 1, 1, 1, 1, 1, 0],
            63: [1, 1, 1, 1, 1, 1, 0],
            64: [0, 0, 0, 0, 0, 0, 1],
            65: [1, 0, 0, 0, 0, 0, 1],
            66: [0, 1, 0, 0, 0, 0, 1],
            67: [1, 1, 0, 0, 0, 0, 1],
            68: [0, 0, 1, 0, 0, 0, 1],
            69: [1, 0, 1, 0, 0, 0, 1],
            70: [0, 1, 1, 0, 0, 0, 1],
            71: [1, 1, 1, 0, 0, 0, 1],
            72: [0, 0, 0, 1, 0, 0, 1],
            73: [1, 0, 0, 1, 0, 0, 1],
            74: [0, 1, 0, 1, 0, 0, 1],
            75: [1, 1, 0, 1, 0, 0, 1],
            76: [0, 0, 1, 1, 0, 0, 1],
            77: [1, 0, 1, 1, 0, 0, 1],
            78: [0, 1, 1, 1, 0, 0, 1],
            79: [1, 1, 1, 1, 0, 0, 1],
            80: [0, 0, 0, 0, 1, 0, 1],
            81: [1, 0, 0, 0, 1, 0, 1],
            82: [0, 1, 0, 0, 1, 0, 1],
            83: [1, 1, 0, 0, 1, 0, 1],
            84: [0, 0, 1, 0, 1, 0, 1],
            85: [1, 0, 1, 0, 1, 0, 1],
            86: [0, 1, 1, 0, 1, 0, 1],
            87: [1, 1, 1, 0, 1, 0, 1],
            88: [0, 0, 0, 1, 1, 0, 1],
            89: [1, 0, 0, 1, 1, 0, 1],
            90: [0, 1, 0, 1, 1, 0, 1],
            91: [1, 1, 0, 1, 1, 0, 1],
            92: [0, 0, 1, 1, 1, 0, 1],
            93: [1, 0, 1, 1, 1, 0, 1],
            94: [0, 1, 1, 1, 1, 0, 1],
            95: [1, 1, 1, 1, 1, 0, 1],
            96: [0, 0, 0, 0, 0, 1, 1],
            97: [1, 0, 0, 0, 0, 1, 1],
            98: [0, 1, 0, 0, 0, 1, 1],
            99: [1, 1, 0, 0, 0, 1, 1],
            100: [0, 0, 1, 0, 0, 1, 1],
            101: [1, 0, 1, 0, 0, 1, 1],
            102: [0, 1, 1, 0, 0, 1, 1],
            103: [1, 1, 1, 0, 0, 1, 1],
            104: [0, 0, 0, 1, 0, 1, 1],
            105: [1, 0, 0, 1, 0, 1, 1],
            106: [0, 1, 0, 1, 0, 1, 1],
            107: [1, 1, 0, 1, 0, 1, 1],
            108: [0, 0, 1, 1, 0, 1, 1],
            109: [1, 0, 1, 1, 0, 1, 1],
            110: [0, 1, 1, 1, 0, 1, 1],
            111: [1, 1, 1, 1, 0, 1, 1],
            112: [0, 0, 0, 0, 1, 1, 1],
            113: [1, 0, 0, 0, 1, 1, 1],
            114: [0, 1, 0, 0, 1, 1, 1],
            115: [1, 1, 0, 0, 1, 1, 1],
            116: [0, 0, 1, 0, 1, 1, 1],
            117: [1, 0, 1, 0, 1, 1, 1],
            118: [0, 1, 1, 0, 1, 1, 1],
            119: [1, 1, 1, 0, 1, 1, 1],
            120: [0, 0, 0, 1, 1, 1, 1],
            121: [1, 0, 0, 1, 1, 1, 1],
            122: [0, 1, 0, 1, 1, 1, 1],
            123: [1, 1, 0, 1, 1, 1, 1],
            124: [0, 0, 1, 1, 1, 1, 1],
            125: [1, 0, 1, 1, 1, 1, 1],
            126: [0, 1, 1, 1, 1, 1, 1]
        }
        self.available_action_keys_from_action = {
            (0, 0, 0, 0, 0, 0): [0, 64],
            (1, 0, 0, 0, 0, 0): [1, 65],
            (0, 1, 0, 0, 0, 0): [2, 66],
            (1, 1, 0, 0, 0, 0): [1, 2, 3, 65, 66, 67],
            (0, 0, 1, 0, 0, 0): [4, 68],
            (1, 0, 1, 0, 0, 0): [1, 4, 5, 65, 68, 69],
            (0, 1, 1, 0, 0, 0): [2, 4, 6, 66, 68, 70],
            (1, 1, 1, 0, 0, 0): [1, 2, 3, 4, 5, 6, 7, 65, 66, 67, 68, 69, 70, 71],
            (0, 0, 0, 1, 0, 0): [8, 72],
            (1, 0, 0, 1, 0, 0): [1, 8, 9, 65, 72, 73],
            (0, 1, 0, 1, 0, 0): [2, 8, 10, 66, 72, 74],
            (1, 1, 0, 1, 0, 0): [1, 2, 3, 8, 9, 10, 11, 65, 66, 67, 72, 73, 74, 75],
            (0, 0, 1, 1, 0, 0): [4, 8, 12, 68, 72, 76],
            (1, 0, 1, 1, 0, 0): [1, 4, 5, 8, 9, 12, 13, 65, 68, 69, 72, 73, 76, 77],
            (0, 1, 1, 1, 0, 0): [2, 4, 6, 8, 10, 12, 14, 66, 68, 70, 72, 74, 76, 78],
            (1, 1, 1, 1, 0, 0): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79],
            (0, 0, 0, 0, 1, 0): [16, 80],
            (1, 0, 0, 0, 1, 0): [1, 16, 17, 65, 80, 81],
            (0, 1, 0, 0, 1, 0): [2, 16, 18, 66, 80, 82],
            (1, 1, 0, 0, 1, 0): [1, 2, 3, 16, 17, 18, 19, 65, 66, 67, 80, 81, 82, 83],
            (0, 0, 1, 0, 1, 0): [4, 16, 20, 68, 80, 84],
            (1, 0, 1, 0, 1, 0): [1, 4, 5, 16, 17, 20, 21, 65, 68, 69, 80, 81, 84, 85],
            (0, 1, 1, 0, 1, 0): [2, 4, 6, 16, 18, 20, 22, 66, 68, 70, 80, 82, 84, 86],
            (1, 1, 1, 0, 1, 0): [1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 65, 66, 67, 68, 69, 70, 71, 80, 81, 82, 83, 84, 85, 86, 87],
            (0, 0, 0, 1, 1, 0): [8, 16, 24, 72, 80, 88],
            (1, 0, 0, 1, 1, 0): [1, 8, 9, 16, 17, 24, 25, 65, 72, 73, 80, 81, 88, 89],
            (0, 1, 0, 1, 1, 0): [2, 8, 10, 16, 18, 24, 26, 66, 72, 74, 80, 82, 88, 90],
            (1, 1, 0, 1, 1, 0): [1, 2, 3, 8, 9, 10, 11, 16, 17, 18, 19, 24, 25, 26, 27, 65, 66, 67, 72, 73, 74, 75, 80, 81, 82, 83, 88, 89, 90, 91],
            (0, 0, 1, 1, 1, 0): [4, 8, 12, 16, 20, 24, 28, 68, 72, 76, 80, 84, 88, 92],
            (1, 0, 1, 1, 1, 0): [1, 4, 5, 8, 9, 12, 13, 16, 17, 20, 21, 24, 25, 28, 29, 65, 68, 69, 72, 73, 76, 77, 80, 81, 84, 85, 88, 89, 92, 93],
            (0, 1, 1, 1, 1, 0): [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94],
            (1, 1, 1, 1, 1, 0): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95],
            (0, 0, 0, 0, 0, 1): [32, 96],
            (1, 0, 0, 0, 0, 1): [1, 32, 33, 65, 96, 97],
            (0, 1, 0, 0, 0, 1): [2, 32, 34, 66, 96, 98],
            (1, 1, 0, 0, 0, 1): [1, 2, 3, 32, 33, 34, 35, 65, 66, 67, 96, 97, 98, 99],
            (0, 0, 1, 0, 0, 1): [4, 32, 36, 68, 96, 100],
            (1, 0, 1, 0, 0, 1): [1, 4, 5, 32, 33, 36, 37, 65, 68, 69, 96, 97, 100, 101],
            (0, 1, 1, 0, 0, 1): [2, 4, 6, 32, 34, 36, 38, 66, 68, 70, 96, 98, 100, 102],
            (1, 1, 1, 0, 0, 1): [1, 2, 3, 4, 5, 6, 7, 32, 33, 34, 35, 36, 37, 38, 39, 65, 66, 67, 68, 69, 70, 71, 96, 97, 98, 99, 100, 101, 102, 103],
            (0, 0, 0, 1, 0, 1): [8, 32, 40, 72, 96, 104],
            (1, 0, 0, 1, 0, 1): [1, 8, 9, 32, 33, 40, 41, 65, 72, 73, 96, 97, 104, 105],
            (0, 1, 0, 1, 0, 1): [2, 8, 10, 32, 34, 40, 42, 66, 72, 74, 96, 98, 104, 106],
            (1, 1, 0, 1, 0, 1): [1, 2, 3, 8, 9, 10, 11, 32, 33, 34, 35, 40, 41, 42, 43, 65, 66, 67, 72, 73, 74, 75, 96, 97, 98, 99, 104, 105, 106, 107],
            (0, 0, 1, 1, 0, 1): [4, 8, 12, 32, 36, 40, 44, 68, 72, 76, 96, 100, 104, 108],
            (1, 0, 1, 1, 0, 1): [1, 4, 5, 8, 9, 12, 13, 32, 33, 36, 37, 40, 41, 44, 45, 65, 68, 69, 72, 73, 76, 77, 96, 97, 100, 101, 104, 105, 108, 109],
            (0, 1, 1, 1, 0, 1): [2, 4, 6, 8, 10, 12, 14, 32, 34, 36, 38, 40, 42, 44, 46, 66, 68, 70, 72, 74, 76, 78, 96, 98, 100, 102, 104, 106, 108, 110],
            (1, 1, 1, 1, 0, 1): [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111],
            (0, 0, 0, 0, 1, 1): [16, 32, 48, 80, 96, 112],
            (1, 0, 0, 0, 1, 1): [1, 16, 17, 32, 33, 48, 49, 65, 80, 81, 96, 97, 112, 113],
            (0, 1, 0, 0, 1, 1): [2, 16, 18, 32, 34, 48, 50, 66, 80, 82, 96, 98, 112, 114],
            (1, 1, 0, 0, 1, 1): [1, 2, 3, 16, 17, 18, 19, 32, 33, 34, 35, 48, 49, 50, 51, 65, 66, 67, 80, 81, 82, 83, 96, 97, 98, 99, 112, 113, 114, 115],
            (0, 0, 1, 0, 1, 1): [4, 16, 20, 32, 36, 48, 52, 68, 80, 84, 96, 100, 112, 116],
            (1, 0, 1, 0, 1, 1): [1, 4, 5, 16, 17, 20, 21, 32, 33, 36, 37, 48, 49, 52, 53, 65, 68, 69, 80, 81, 84, 85, 96, 97, 100, 101, 112, 113, 116, 117],
            (0, 1, 1, 0, 1, 1): [2, 4, 6, 16, 18, 20, 22, 32, 34, 36, 38, 48, 50, 52, 54, 66, 68, 70, 80, 82, 84, 86, 96, 98, 100, 102, 112, 114, 116, 118],
            (1, 1, 1, 0, 1, 1): [1, 2, 3, 4, 5, 6, 7, 16, 17, 18, 19, 20, 21, 22, 23, 32, 33, 34, 35, 36, 37, 38, 39, 48, 49, 50, 51, 52, 53, 54, 55, 65, 66, 67, 68, 69, 70, 71, 80, 81, 82, 83, 84, 85, 86, 87, 96, 97, 98, 99, 100, 101, 102, 103, 112, 113, 114, 115, 116, 117, 118, 119],
            (0, 0, 0, 1, 1, 1): [8, 16, 24, 32, 40, 48, 56, 72, 80, 88, 96, 104, 112, 120],
            (1, 0, 0, 1, 1, 1): [1, 8, 9, 16, 17, 24, 25, 32, 33, 40, 41, 48, 49, 56, 57, 65, 72, 73, 80, 81, 88, 89, 96, 97, 104, 105, 112, 113, 120, 121],
            (0, 1, 0, 1, 1, 1): [2, 8, 10, 16, 18, 24, 26, 32, 34, 40, 42, 48, 50, 56, 58, 66, 72, 74, 80, 82, 88, 90, 96, 98, 104, 106, 112, 114, 120, 122],
            (1, 1, 0, 1, 1, 1): [1, 2, 3, 8, 9, 10, 11, 16, 17, 18, 19, 24, 25, 26, 27, 32, 33, 34, 35, 40, 41, 42, 43, 48, 49, 50, 51, 56, 57, 58, 59, 65, 66, 67, 72, 73, 74, 75, 80, 81, 82, 83, 88, 89, 90, 91, 96, 97, 98, 99, 104, 105, 106, 107, 112, 113, 114, 115, 120, 121, 122, 123],
            (0, 0, 1, 1, 1, 1): [4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124],
            (1, 0, 1, 1, 1, 1): [1, 4, 5, 8, 9, 12, 13, 16, 17, 20, 21, 24, 25, 28, 29, 32, 33, 36, 37, 40, 41, 44, 45, 48, 49, 52, 53, 56, 57, 60, 61, 65, 68, 69, 72, 73, 76, 77, 80, 81, 84, 85, 88, 89, 92, 93, 96, 97, 100, 101, 104, 105, 108, 109, 112, 113, 116, 117, 120, 121, 124, 125],
            (0, 1, 1, 1, 1, 1): [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126],
            (1, 1, 1, 1, 1, 1): [63],
            (2, 2, 2, 0, 0, 0): [7, 71],
            (2, 2, 0, 2, 0, 0): [11, 75],
            (2, 0, 2, 2, 0, 0): [13, 77],
            (0, 2, 2, 2, 0, 0): [14, 78],
            (1, 2, 2, 2, 0, 0): [1, 65, 14, 78, 15, 79],
            (2, 1, 2, 2, 0, 0): [2, 66, 13, 77, 15, 79],
            (2, 2, 1, 2, 0, 0): [4, 68, 11, 75, 15, 79],
            (2, 2, 2, 1, 0, 0): [8, 72, 7, 71, 15, 79],
            (2, 2, 2, 2, 0, 0): [15, 79],
            (2, 2, 0, 0, 2, 0): [19, 83],
            (2, 0, 2, 0, 2, 0): [21, 85],
            (0, 2, 2, 0, 2, 0): [22, 86],
            (1, 2, 2, 0, 2, 0): [1, 65, 22, 86, 23, 87],
            (2, 1, 2, 0, 2, 0): [2, 66, 21, 85, 23, 87],
            (2, 2, 1, 0, 2, 0): [4, 68, 19, 83, 23, 87],
            (2, 2, 2, 0, 1, 0): [16, 80, 7, 71, 23, 87],
            (2, 2, 2, 0, 2, 0): [23, 87],
            (2, 0, 0, 2, 2, 0): [25, 89],
            (0, 2, 0, 2, 2, 0): [26, 90],
            (1, 2, 0, 2, 2, 0): [1, 65, 26, 90, 27, 91],
            (2, 1, 0, 2, 2, 0): [2, 66, 25, 89, 27, 91],
            (2, 2, 0, 1, 2, 0): [8, 72, 19, 83, 27, 91],
            (2, 2, 0, 2, 1, 0): [16, 80, 11, 75, 27, 91],
            (2, 2, 0, 2, 2, 0): [27, 91],
            (0, 0, 2, 2, 2, 0): [28, 92],
            (1, 0, 2, 2, 2, 0): [1, 65, 28, 92, 29, 93],
            (2, 0, 1, 2, 2, 0): [4, 68, 25, 89, 29, 93],
            (2, 0, 2, 1, 2, 0): [8, 72, 21, 85, 29, 93],
            (2, 0, 2, 2, 1, 0): [16, 80, 13, 77, 29, 93],
            (2, 0, 2, 2, 2, 0): [29, 93],
            (0, 1, 2, 2, 2, 0): [2, 66, 28, 92, 30, 94],
            (0, 2, 1, 2, 2, 0): [4, 68, 26, 90, 30, 94],
            (0, 2, 2, 1, 2, 0): [8, 72, 22, 86, 30, 94],
            (0, 2, 2, 2, 1, 0): [16, 80, 14, 78, 30, 94],
            (0, 2, 2, 2, 2, 0): [30, 94],
            (2, 2, 2, 2, 2, 0): [31, 95],
            (1, 2, 2, 2, 2, 0): [1, 14, 15, 22, 23, 26, 27, 28, 29, 30, 31, 65, 78, 79, 86, 87, 90, 91, 92, 93, 94, 95],
            (2, 1, 2, 2, 2, 0): [31, 95, 2, 66, 15, 79, 30, 94, 27, 91, 23, 87, 29, 93, 13, 77, 21, 85, 25, 89, 28, 92],
            (2, 2, 1, 2, 2, 0): [31, 95, 4, 68, 15, 79, 23, 87, 29, 93, 30, 94, 27, 91, 26, 90, 25, 89, 19, 83, 11, 75],
            (2, 2, 2, 1, 2, 0): [31, 95, 8, 72, 15, 79, 30, 94, 29, 93, 27, 91, 23, 87, 7, 71, 22, 86, 21, 85, 19, 83],
            (2, 2, 2, 2, 1, 0): [31, 95, 16, 80, 23, 87, 30, 94, 29, 93, 27, 91, 15, 79, 14, 78, 13, 77, 11, 75, 7, 71],
            (1, 1, 2, 2, 2, 0): [31, 95, 1, 65, 3, 67, 29, 93, 2, 66, 30, 94, 28, 92],
            (1, 2, 1, 2, 2, 0): [31, 95, 1, 65, 4, 68, 5, 69, 27, 91, 30, 94, 26, 90],
            (1, 2, 2, 1, 2, 0): [31, 95, 1, 65, 8, 72, 9, 73, 23, 87, 30, 94, 22, 86],
            (1, 2, 2, 2, 1, 0): [31, 95, 1, 65, 16, 80, 17, 81, 15, 79, 30, 94, 14, 78],
            (2, 1, 1, 2, 2, 0): [31, 95, 2, 66, 4, 68, 6, 70, 29, 93, 27, 91, 25, 89],
            (2, 1, 2, 1, 2, 0): [31, 95, 2, 66, 8, 72, 10, 74, 23, 87, 29, 93, 21, 85],
            (2, 1, 2, 2, 1, 0): [31, 95, 2, 66, 16, 80, 18, 82, 15, 79, 29, 93, 13, 77],
            (2, 2, 1, 1, 2, 0): [31, 95, 4, 68, 8, 72, 12, 76, 27, 91, 23, 87, 19, 83],
            (2, 2, 1, 2, 1, 0): [31, 95, 4, 68, 16, 80, 20, 84, 15, 79, 27, 91, 11, 75],
            (2, 2, 2, 1, 1, 0): [31, 95, 8, 72, 16, 80, 24, 88, 15, 79, 23, 87, 7, 71],
            (2, 2, 0, 0, 0, 2): [35, 99],
            (2, 0, 2, 0, 0, 2): [37, 101],
            (0, 2, 2, 0, 0, 2): [38, 102],
            (1, 2, 2, 0, 0, 2): [1, 65, 38, 102, 39, 103],
            (2, 1, 2, 0, 0, 2): [2, 66, 37, 101, 39, 103],
            (2, 2, 1, 0, 0, 2): [4, 68, 35, 99, 39, 103],
            (2, 2, 2, 0, 0, 1): [32, 96, 7, 71, 39, 103],
            (2, 2, 2, 0, 0, 2): [39, 103],
            (2, 0, 0, 2, 0, 2): [41, 105],
            (0, 2, 0, 2, 0, 2): [42, 106],
            (1, 2, 0, 2, 0, 2): [1, 65, 42, 106, 43, 107],
            (2, 1, 0, 2, 0, 2): [2, 66, 41, 105, 43, 107],
            (2, 2, 0, 1, 0, 2): [4, 68, 39, 103, 43, 107],
            (2, 2, 0, 2, 0, 1): [16, 80, 35, 99, 43, 107],
            (2, 2, 0, 2, 0, 2): [43, 107],
            (0, 0, 2, 2, 0, 2): [44, 108],
            (1, 0, 2, 2, 0, 2): [1, 65, 44, 108, 45, 109],
            (2, 0, 1, 2, 0, 2): [4, 68, 41, 105, 45, 109],
            (2, 0, 2, 1, 0, 2): [8, 72, 42, 106, 45, 109],
            (2, 0, 2, 2, 0, 1): [16, 80, 37, 101, 45, 109],
            (2, 0, 2, 2, 0, 2): [45, 109],
            (0, 1, 2, 2, 0, 2): [2, 66, 44, 108, 46, 110],
            (0, 2, 1, 2, 0, 2): [4, 68, 42, 106, 46, 110],
            (0, 2, 2, 1, 0, 2): [8, 72, 38, 102, 46, 110],
            (0, 2, 2, 2, 0, 1): [32, 96, 14, 78, 46, 110],
            (0, 2, 2, 2, 0, 2): [46, 110],
            (1, 2, 2, 2, 0, 2): [47, 111, 1, 65, 15, 79, 39, 103, 43, 107, 45, 109, 46, 110, 14, 78, 38, 102, 42, 106, 44, 108],
            (2, 1, 2, 2, 0, 2): [47, 111, 2, 66, 15, 79, 46, 110, 43, 107, 39, 103, 45, 109, 13, 77, 37, 101, 41, 105, 44, 108],
            (2, 2, 1, 2, 0, 2): [47, 111, 4, 68, 15, 79, 39, 103, 45, 109, 46, 110, 43, 107, 11, 75, 35, 99, 41, 105, 42, 106],
            (2, 2, 2, 1, 0, 2): [47, 111, 8, 72, 15, 79, 43, 107, 45, 109, 46, 110, 39, 103, 7, 71, 38, 102, 37, 101, 35, 99],
            (2, 2, 2, 2, 0, 1): [47, 111, 32, 96, 39, 103, 43, 107, 45, 109, 46, 110, 15, 79, 7, 71, 13, 77, 11, 75, 14, 78],
            (2, 2, 2, 2, 0, 2): [47, 111],
            (1, 1, 2, 2, 0, 2): [47, 111, 1, 65, 3, 67, 45, 109, 2, 66, 46, 110, 44, 108],
            (1, 2, 1, 2, 0, 2): [47, 111, 1, 65, 4, 68, 5, 69, 43, 107, 46, 110, 42, 106],
            (1, 2, 2, 1, 0, 2): [47, 111, 1, 65, 8, 72, 9, 73, 39, 103, 46, 110, 38, 102],
            (1, 2, 2, 2, 0, 1): [47, 111, 1, 65, 32, 96, 33, 97, 15, 79, 46, 110, 14, 78],
            (2, 1, 1, 2, 0, 2): [47, 111, 2, 66, 4, 68, 6, 70, 45, 109, 43, 107, 41, 105],
            (2, 1, 2, 1, 0, 2): [47, 111, 2, 66, 8, 72, 10, 74, 39, 103, 45, 109, 37, 101],
            (2, 1, 2, 2, 0, 1): [47, 111, 2, 66, 32, 96, 34, 98, 15, 79, 45, 109, 13, 77],
            (2, 2, 1, 1, 0, 2): [47, 111, 4, 68, 8, 72, 12, 76, 43, 107, 39, 103, 35, 99],
            (2, 2, 1, 2, 0, 1): [47, 111, 4, 68, 32, 96, 36, 100, 15, 79, 43, 107, 11, 75],
            (2, 2, 2, 1, 0, 1): [47, 111, 8, 72, 32, 96, 40, 104, 15, 79, 39, 103, 7, 71],
            (2, 0, 0, 0, 2, 2): [49, 113],
            (0, 2, 0, 0, 2, 2): [50, 114],
            (1, 2, 0, 0, 2, 2): [1, 65, 50, 114, 51, 115],
            (2, 1, 0, 0, 2, 2): [2, 66, 49, 113, 51, 115],
            (2, 2, 0, 0, 1, 2): [16, 80, 35, 99, 51, 115],
            (2, 2, 0, 0, 2, 1): [32, 96, 19, 83, 51, 115],
            (2, 2, 0, 0, 2, 2): [51, 115],
            (0, 0, 2, 0, 2, 2): [52, 116],
            (1, 0, 2, 0, 2, 2): [1, 65, 52, 116, 53, 117],
            (2, 0, 1, 0, 2, 2): [4, 68, 49, 113, 53, 117],
            (2, 0, 2, 0, 1, 2): [16, 80, 37, 101, 53, 117],
            (2, 0, 2, 0, 2, 1): [32, 96, 21, 85, 53, 117],
            (2, 0, 2, 0, 2, 2): [53, 117],
            (0, 1, 2, 0, 2, 2): [2, 66, 52, 116, 54, 118],
            (0, 2, 1, 0, 2, 2): [4, 68, 50, 114, 54, 118],
            (0, 2, 2, 0, 1, 2): [16, 80, 38, 102, 54, 118],
            (0, 2, 2, 0, 2, 1): [32, 96, 22, 86, 54, 118],
            (0, 2, 2, 0, 2, 2): [54, 118],
            (1, 2, 2, 0, 2, 2): [55, 119, 1, 65, 23, 87, 39, 103, 51, 115, 53, 117, 54, 118, 38, 102, 22, 86, 50, 114, 52, 116],
            (2, 1, 2, 0, 2, 2): [55, 119, 2, 66, 54, 118, 51, 115, 39, 103, 23, 87, 53, 117, 52, 116, 49, 113, 37, 101, 21, 85],
            (2, 2, 1, 0, 2, 2): [55, 119, 4, 68, 23, 87, 39, 103, 53, 117, 54, 118, 51, 115, 19, 83, 35, 99, 49, 113, 50, 114],
            (2, 2, 2, 0, 1, 2): [55, 119, 16, 80, 23, 87, 51, 115, 53, 117, 54, 118, 39, 103, 7, 71, 35, 99, 37, 101, 38, 102],
            (2, 2, 2, 0, 2, 1): [55, 119, 32, 96, 39, 103, 51, 115, 53, 117, 54, 118, 23, 87, 7, 71, 19, 83, 21, 85, 22, 86],
            (2, 2, 2, 0, 2, 2): [55, 119],
            (1, 1, 2, 0, 2, 2): [55, 119, 1, 65, 3, 67, 2, 66, 52, 116, 53, 117, 54, 118],
            (1, 2, 1, 0, 2, 2): [55, 119, 1, 65, 4, 68, 5, 69, 50, 114, 54, 118, 51, 115],
            (1, 2, 2, 0, 1, 2): [55, 119, 1, 65, 16, 80, 17, 81, 38, 102, 54, 118, 39, 103],
            (1, 2, 2, 0, 2, 1): [55, 119, 1, 65, 32, 96, 33, 97, 23, 87, 54, 118, 22, 86],
            (2, 1, 1, 0, 2, 2): [55, 119, 2, 66, 4, 68, 6, 70, 51, 115, 49, 113, 53, 117],
            (2, 1, 2, 0, 1, 2): [55, 119, 2, 66, 16, 80, 18, 82, 39, 103, 37, 101, 53, 117],
            (2, 1, 2, 0, 2, 1): [55, 119, 2, 66, 32, 96, 34, 98, 23, 87, 53, 117, 21, 85],
            (2, 2, 1, 0, 1, 2): [55, 119, 4, 68, 16, 80, 20, 84, 51, 115, 39, 103, 35, 99],
            (2, 2, 1, 0, 2, 1): [55, 119, 4, 68, 32, 96, 36, 100, 23, 87, 19, 83, 39, 103],
            (2, 2, 2, 0, 1, 1): [55, 119, 16, 80, 32, 96, 48, 112, 23, 87, 7, 71, 39, 103],
            (0, 0, 0, 2, 2, 2): [56, 120],
            (1, 0, 0, 2, 2, 2): [1, 65, 56, 120, 57, 121],
            (2, 0, 0, 1, 2, 2): [8, 72, 49, 113, 57, 121],
            (2, 0, 0, 2, 1, 2): [16, 80, 41, 105, 57, 121],
            (2, 0, 0, 2, 2, 1): [32, 96, 25, 89, 57, 121],
            (2, 0, 0, 2, 2, 2): [57, 121],
            (0, 1, 0, 2, 2, 2): [2, 66, 56, 120, 58, 122],
            (0, 2, 0, 1, 2, 2): [8, 72, 50, 114, 58, 122],
            (0, 2, 0, 2, 1, 2): [16, 80, 42, 106, 58, 122],
            (0, 2, 0, 2, 2, 1): [32, 96, 26, 90, 58, 122],
            (0, 2, 0, 2, 2, 2): [58, 122],
            (1, 2, 0, 2, 2, 2): [1, 65, 26, 90, 42, 106,  50, 114, 56, 120, 27, 91, 43, 107,51, 115, 57, 121, 58, 122, 59, 123],
            (2, 1, 0, 2, 2, 2): [2, 66, 25, 89, 41, 105,  49, 113, 56, 120, 27, 91, 43, 107,51, 115, 57, 121, 58, 122, 59, 123],
            (2, 2, 0, 1, 2, 2): [8, 72, 19, 83, 35,  99,  33,  95, 34,  96, 27, 91, 43, 107,51, 115, 57, 121, 58, 122, 59, 123],
            (2, 2, 0, 2, 1, 2): [16, 80, 11, 75, 35, 99, 41, 105, 42, 106, 27, 91, 43, 107,51, 115, 57, 121, 58, 122, 59, 123],
            (2, 2, 0, 2, 2, 1): [59, 123, 32, 96, 43, 107, 51, 115, 57, 121, 58, 122, 27, 91, 11, 75, 19,83, 25, 89, 26, 90],
            (1, 1, 0, 2, 2, 2): [59, 123, 1, 65, 3, 67, 2, 66, 56, 120, 57, 121, 58, 122],
            (1, 2, 0, 1, 2, 2): [59, 123, 1, 65, 8, 72, 9, 73, 50, 114, 58, 122, 51, 115],
            (1, 2, 0, 2, 1, 2): [59, 123, 1, 65, 16, 80, 17, 81, 42, 106, 58, 122, 43, 107],
            (1, 2, 0, 2, 2, 1): [59, 123, 1, 65, 32, 96, 33, 97, 26, 90, 58, 122, 27, 91],
            (2, 1, 0, 1, 2, 2): [59, 123, 2, 66, 8, 72, 10, 74, 49, 113, 57, 121, 51, 115],
            (2, 1, 0, 2, 1, 2): [59, 123, 2, 66, 16, 80, 18, 82, 41, 105, 57, 121, 43, 107],
            (2, 1, 0, 2, 2, 1): [59, 123, 2, 66, 32, 96, 34, 98, 25, 89, 57, 121, 27, 91],
            (2, 2, 0, 1, 1, 2): [59, 123, 8, 72, 16, 80, 24, 88, 35, 99, 51, 115, 43, 107],
            (2, 2, 0, 1, 2, 1): [59, 123, 8, 72, 32, 96, 40, 104, 19, 83, 51, 115, 27, 91],
            (2, 2, 0, 2, 1, 1): [59, 123, 16, 80, 32, 96, 48, 112, 11, 75, 27, 91, 43, 107],
            (2, 2, 0, 2, 2, 2): [59, 123],
            (0, 0, 1, 2, 2, 2): [4, 68, 56, 120, 60, 124],
            (0, 0, 2, 1, 2, 2): [8, 72, 52, 116, 60, 124],
            (0, 0, 2, 2, 1, 2): [16, 80, 44, 108, 60, 124],
            (0, 0, 2, 2, 2, 1): [32, 96, 28, 92, 60, 124],
            (0, 0, 2, 2, 2, 2): [60, 124],
            (1, 0, 2, 2, 2, 2): [61, 125, 1, 65, 29, 93, 45, 109, 53, 117, 57, 121, 60, 124, 28, 92, 44, 108, 52, 116, 56, 120],
            (2, 0, 1, 2, 2, 2): [61, 125, 4, 68, 29, 93, 45, 109, 53, 117, 60, 124, 57, 121, 25, 89, 41, 105, 49, 113, 56, 120],
            (2, 0, 2, 1, 2, 2): [61, 125, 8, 72, 29, 93, 45, 109, 57, 121, 60, 124, 53, 117, 21, 85, 37, 101, 49, 113, 52, 116],
            (2, 0, 2, 2, 1, 2): [61, 125, 16, 80, 29, 93, 53, 117, 57, 121, 60, 124, 45, 109, 13, 77, 37, 101, 41, 105, 44, 108],
            (2, 0, 2, 2, 2, 1): [61, 125, 32, 96, 45, 109, 53, 117, 57, 121, 60, 124, 29, 93, 13, 77, 21, 85, 25, 89, 28, 92],
            (2, 0, 2, 2, 2, 2): [61, 125],
            (1, 0, 1, 2, 2, 2): [61, 125, 1, 65, 4, 68, 5, 69, 56, 120, 60, 124, 57, 121],
            (1, 0, 2, 1, 2, 2): [61, 125, 1, 65, 8, 72, 9, 73, 52, 116, 60, 124, 53, 117],
            (1, 0, 2, 2, 1, 2): [61, 125, 1, 65, 16, 80, 17, 81, 44, 108, 60, 124, 45, 109],
            (1, 0, 2, 2, 2, 1): [61, 125, 1, 65, 32, 96, 33, 97, 28, 92, 60, 124, 29, 93],
            (2, 0, 1, 1, 2, 2): [61, 125, 4, 68, 8, 72, 12, 76, 49, 113, 57, 121, 53, 117],
            (2, 0, 1, 2, 1, 2): [61, 125, 4, 68, 16, 80, 20, 84, 41, 105, 57, 121, 45, 109],
            (2, 0, 1, 2, 2, 1): [61, 125, 4, 68, 32, 96, 36, 100, 25, 89, 57, 121, 29, 93],
            (2, 0, 2, 1, 1, 2): [61, 125, 8, 72, 16, 80, 24, 88, 37, 101, 53, 117, 45, 109],
            (2, 0, 2, 1, 2, 1): [61, 125, 8, 72, 32, 96, 40, 104, 21, 85, 53, 117, 45, 109],
            (2, 0, 2, 2, 1, 1): [61, 125, 16, 80, 32, 96, 48, 112, 13, 77, 29, 93, 45, 109],
            (0, 1, 2, 2, 2, 2): [62, 126, 2, 66, 30, 94, 46, 110, 54, 118, 58, 122, 60, 124, 28, 92, 44, 108, 52, 116, 56, 120],
            (0, 2, 1, 2, 2, 2): [62, 126, 4, 68, 30, 94, 46, 110, 54, 118, 60, 124, 58, 122, 26, 90, 42, 106, 50, 114, 56, 120],
            (0, 2, 2, 1, 2, 2): [62, 126, 8, 72, 30, 94, 46, 110, 58, 122, 60, 124, 54, 118, 22, 86, 38, 102, 50, 114, 52, 116],
            (0, 2, 2, 2, 1, 2): [62, 126, 16, 80, 30, 94, 54, 118, 58, 122, 60, 124, 46, 110, 14, 78, 38, 102, 42, 106, 44, 108],
            (0, 2, 2, 2, 2, 1): [62, 126, 32, 96, 46, 110, 54, 118, 58, 122, 60, 124, 30, 94, 14, 78, 22, 86, 26, 90, 28, 92],
            (0, 2, 2, 2, 2, 2): [62, 126],
            (0, 1, 1, 2, 2, 2): [62, 126, 2, 66, 4, 68, 6, 70, 56, 120, 60, 124, 58, 122],
            (0, 1, 2, 1, 2, 2): [62, 126, 2, 66, 8, 72, 10, 74, 52, 116, 60, 124, 58, 122],
            (0, 1, 2, 2, 1, 2): [62, 126, 2, 66, 16, 80, 18, 82, 44, 108, 60, 124, 58, 122],
            (0, 1, 2, 2, 2, 1): [62, 126, 2, 66, 32, 96, 34, 98, 28, 92, 60, 124, 58, 122],
            (0, 2, 1, 1, 2, 2): [62, 126, 4, 68, 8, 72, 12, 76, 50, 114, 58, 122, 54, 118],
            (0, 2, 1, 2, 1, 2): [62, 126, 4, 68, 16, 80, 20, 84, 42, 106, 58, 122, 46, 110],
            (0, 2, 1, 2, 2, 1): [62, 126, 4, 68, 32, 96, 36, 100, 26, 90, 58, 122, 30, 94],
            (0, 2, 2, 1, 1, 2): [62, 126, 8, 72, 16, 80, 24, 88, 38, 102, 46, 110, 54, 118],
            (0, 2, 2, 1, 2, 1): [62, 126, 8, 72, 32, 96, 40, 104, 22, 86, 54, 118, 30, 94],
            (0, 2, 2, 2, 1, 1): [62, 126, 16, 80, 32, 96, 48, 112, 14, 78, 30, 94, 46, 110],
            (2, 2, 2, 2, 2, 2): [63],
            (1, 2, 2, 2, 2, 2): [63],
            (2, 1, 2, 2, 2, 2): [63],
            (2, 2, 1, 2, 2, 2): [63],
            (2, 2, 2, 1, 2, 2): [63],
            (2, 2, 2, 2, 1, 2): [63],
            (2, 2, 2, 2, 2, 1): [63],
            (1, 1, 2, 2, 2, 2): [63],
            (1, 2, 1, 2, 2, 2): [63],
            (1, 2, 2, 1, 2, 2): [63],
            (1, 2, 2, 2, 1, 2): [63],
            (1, 2, 2, 2, 2, 1): [63],
            (2, 1, 1, 2, 2, 2): [63],
            (2, 1, 2, 1, 2, 2): [63],
            (2, 1, 2, 2, 1, 2): [63],
            (2, 1, 2, 2, 2, 1): [63],
            (2, 2, 1, 1, 2, 2): [63],
            (2, 2, 1, 2, 1, 2): [63],
            (2, 2, 1, 2, 2, 1): [63],
            (2, 2, 2, 1, 1, 2): [63],
            (2, 2, 2, 1, 2, 1): [63],
            (2, 2, 2, 2, 1, 1): [63],
            (1, 1, 1, 2, 2, 2): [63],
            (1, 1, 2, 1, 2, 2): [63],
            (1, 1, 2, 2, 1, 2): [63],
            (1, 1, 2, 2, 2, 1): [63],
            (1, 2, 1, 1, 2, 2): [63],
            (1, 2, 1, 2, 1, 2): [63],
            (1, 2, 1, 2, 2, 1): [63],
            (1, 2, 2, 1, 1, 2): [63],
            (1, 2, 2, 1, 2, 1): [63],
            (1, 2, 2, 2, 1, 1): [63],
            (2, 1, 1, 1, 2, 2): [63],
            (2, 1, 1, 2, 1, 2): [63],
            (2, 1, 1, 2, 2, 1): [63],
            (2, 1, 2, 1, 1, 2): [63],
            (2, 1, 2, 1, 2, 1): [63],
            (2, 1, 2, 2, 1, 1): [63],
            (2, 2, 1, 1, 1, 2): [63],
            (2, 2, 1, 1, 2, 1): [63],
            (2, 2, 1, 2, 1, 1): [63],
            (2, 2, 2, 1, 1, 1): [63]
        }


    def reset(self):
        self.dices_values = np.zeros(NUM_DICE, dtype=int)
        self.saved_dice = np.zeros(NUM_DICE, dtype=int)
        self.player_1.reset()
        self.player_2.reset()
        self.player_turn = random.randint(0, 1)
        self.is_game_over = False
        self.reward = 0.0

    def launch_dices(self):
        for i in range(NUM_DICE):
            if self.saved_dice[i] == 0:
                self.dices_values[i] = np.random.randint(1, 7)

    def reset_saved_dices(self):
        self.dices_values = np.zeros((NUM_DICE,), dtype=int)
        self.saved_dice = np.zeros((NUM_DICE,), dtype=int)

    def state_description(self):
        state = np.zeros(NUM_STATE_FEATURES)
        for i in range(NUM_DICE):
            state[i * 6 + self.dices_values[i] - 1] = 1.0
        for i in range(NUM_DICE):
            state[NUM_DICE_VALUE_ONE_HOT + 2 * i + self.saved_dice[i]] = 1.0
        state[-3] = self.player_1.potential_score
        state[-2] = self.player_1.score
        state[-1] = self.player_2.score
        return state

    def change_player_turn(self):
        if self.player_turn == 0:
            self.player_turn = 1
        else:
            self.player_turn = 0

    def end_turn_score(self, keep: bool, player: Player_v4):
        if keep:
            player.add_score()
            if player.score >= 1.0:
                self.is_game_over = True
            if self.is_game_over:
                if self.player_turn == 0:
                    self.reward += 1
                else:
                    self.reward -= 1
                return
        player.potential_score = 0.0
        self.reset_saved_dices()
        self.change_player_turn()

    def update_saved_dice(self, action_key):
        for i in range(NUM_DICE):
            if self.actions_dict[action_key][i] == 1:
                self.saved_dice[i] = 1

    def print_action(self, action_key):
        print(action_key)
        print(self.actions_dict[action_key])

    def update_potential_score(self, action_key, player: Player_v4):
        dice_count = np.zeros(6)

        # action ==> 0 si on garde pas le dé
        # ==> 1 si on le garde dans le cadre de l'attribution de points
        # action => [x, x, x, x, x, x, end/not_end]
        # Valeur des dés, et nombre d'apparition des dés scorables
        for i in range(NUM_DICE):
            if self.actions_dict[action_key][i] == 1:
                dice_count[self.dices_values[i] - 1] += 1  # Compter les occurrences de chaque valeur de dé

        for i in range(NUM_DICE):
            if (i + 1, dice_count[i]) in self.scoring_rules:
                player.potential_score += self.scoring_rules[(i + 1, dice_count[i])]

        self.update_saved_dice(action_key)


    def print_dices(self):
        print("_-_-_-_-_-_-_-_-_-Farkle-_-_-_-_-_-_-_-_-_\n")
        if self.player_turn == 0:
            print("C'est le tour du joueur 1")
        else:
            print("C'est le tour du joueur 2")

        dices_visual = {
            1: ("┌─────┐", "│     │", "│  ●  │", "│     │", "└─────┘"),
            2: ("┌─────┐", "│ ●   │", "│     │", "│   ● │", "└─────┘"),
            3: ("┌─────┐", "│ ●   │", "│  ●  │", "│   ● │", "└─────┘"),
            4: ("┌─────┐", "│ ● ● │", "│     │", "│ ● ● │", "└─────┘"),
            5: ("┌─────┐", "│ ● ● │", "│  ●  │", "│ ● ● │", "└─────┘"),
            6: ("┌─────┐", "│ ● ● │", "│ ● ● │", "│ ● ● │", "└─────┘"),
        }

        red_dices_visual = {
            1: (
                "\033[91m┌─────┐\033[0m",
                "\033[91m│     │\033[0m",
                "\033[91m│  ●  │\033[0m",
                "\033[91m│     │\033[0m",
                "\033[91m└─────┘\033[0m"
            ),
            2: (
                "\033[91m┌─────┐\033[0m",
                "\033[91m│ ●   │\033[0m",
                "\033[91m│     │\033[0m",
                "\033[91m│   ● │\033[0m",
                "\033[91m└─────┘\033[0m"
            ),
            3: (
                "\033[91m┌─────┐\033[0m",
                "\033[91m│ ●   │\033[0m",
                "\033[91m│  ●  │\033[0m",
                "\033[91m│   ● │\033[0m",
                "\033[91m└─────┘\033[0m"
            ),
            4: (
                "\033[91m┌─────┐\033[0m",
                "\033[91m│ ● ● │\033[0m",
                "\033[91m│     │\033[0m",
                "\033[91m│ ● ● │\033[0m",
                "\033[91m└─────┘\033[0m"
            ),
            5: (
                "\033[91m┌─────┐\033[0m",
                "\033[91m│ ● ● │\033[0m",
                "\033[91m│  ●  │\033[0m",
                "\033[91m│ ● ● │\033[0m",
                "\033[91m└─────┘\033[0m"
            ),
            6: (
                "\033[91m┌─────┐\033[0m",
                "\033[91m│ ● ● │\033[0m",
                "\033[91m│ ● ● │\033[0m",
                "\033[91m│ ● ● │\033[0m",
                "\033[91m└─────┘\033[0m"
            )
        }

        lines = [""] * 5
        for i, value in enumerate(self.dices_values):
            if int(self.saved_dice[i]) == 0:
                face = dices_visual[value]
            else:
                face = red_dices_visual[value]
            for i in range(5):
                lines[i] += face[i] + "  "

        for line in lines:
            print(line)

        print("n°: 1  /    2   /    3   /    4   /    5   /    6\n")

        print(f"Dés déjà sauvegardés: {self.saved_dice}\n")

        if self.player_turn == 0:
            print(f"Score potentiel en cours: {self.player_1.potential_score * 10000}")
        else:
            print(f"Score potentiel en cours: {self.player_2.potential_score * 10000}")

        print(f"Score du joueur 1: {self.player_1.score * 10000}")
        print(f"Score du joueur 2: {self.player_2.score * 10000}\n")


    def available_dices_value_count(self):
        dice_count = np.zeros(6)
        for i in range(NUM_DICE):
            if self.saved_dice[i] == 0:
                dice_count[self.dices_values[i] - 1] += 1
        return dice_count
        # dice_results = [3, 2, 3, 5, 6, 5]
        # dice_count = [0, 1, 2, 0, 2, 1]

    def check_for_suite(self, player: Player_v4, dice_count):
        if np.array_equal(dice_count, np.ones(6)):
            player.potential_score += 0.15
            self.reset_saved_dices()
            self.launch_dices()
            return self.available_actions(player)

    def check_nothing(self, player: Player_v4, dice_count):
        if np.array_equal(dice_count, np.zeros(6)):
            player.potential_score += 0.05
            self.reset_saved_dices()
            self.launch_dices()
            return self.available_actions(player)

    def check_three_pairs(self, player: Player_v4, dice_count):
        if (dice_count == 2).sum() == 3:
            player.potential_score += 0.1
            self.reset_saved_dices()
            self.launch_dices()
            return self.available_actions(player)

    def check_trois_identiques_twice(self, player: Player_v4, dice_count):
        # [3, 3, 0, 0, 0, 0]
        three_of_a_kind_count = (dice_count == 3).sum()
        if three_of_a_kind_count == 2:
            mult = dice_count / 3 * np.array([0.1, 0.02, 0.03, 0.04, 0.05, 0.06])
            # [1, 1, 0, 0, 0, 0] * [0.1, 0.02, 0.03, 0.04, 0.05, 0.06] = [0.1, 0.02, 0, 0, 0, 0]
            player.potential_score += mult.sum()
            self.reset_saved_dices()
            self.launch_dices()
            return self.available_actions(player)

    def check_six_identiques(self, player: Player_v4, dice_count):
        if (dice_count == 6).sum() == 1:
            mult = dice_count / 6 * np.array([0.8, 0.16, 0.24, 0.32, 0.4, 0.48])
            player.potential_score += mult.sum()
            self.reset_saved_dices()
            self.launch_dices()
            return self.available_actions(player)

    def check_quaq_and_pair(self, player: Player_v4, dice_count):
        if (dice_count == 4).sum() == 1 and (dice_count == 2).sum() == 1:
            player.potential_score += 0.15
            self.reset_saved_dices()
            self.launch_dices()
            return self.available_actions(player)

    # def dices_values_without_saved_dices(self):
    #     return (-self.saved_dice + np.ones(NUM_DICE, dtype=int)) * self.dices_values

    def dices_values_without_saved_dices(self):
        dices_values_without_saved_dices = []
        for i in range(NUM_DICE):
            if self.saved_dice[i] == 0:
                dices_values_without_saved_dices.append(self.dices_values[i])
            else:
                dices_values_without_saved_dices.append(0)
        return dices_values_without_saved_dices

    def check_auto_reroll(self, player: Player_v4, dice_count):
        self.check_nothing(player, dice_count)
        self.check_for_suite(player, dice_count)
        self.check_six_identiques(player, dice_count)
        self.check_quaq_and_pair(player, dice_count)
        self.check_three_pairs(player, dice_count)
        self.check_trois_identiques_twice(player, dice_count)

    # def handle_dice_reset_and_reroll(self,
    #                                  player,
    #                                  dice_count,
    #                                  available_actions_mask):
    #
    #     available_actions_without_zeros = [int(x) for x in available_actions_mask if x != 0]
    #     saved_dices_without_zeros = [int(x) for x in self.saved_dice if x != 0]
    #
    #     if len(available_actions_without_zeros + saved_dices_without_zeros) == 6:
    #         for i in range(len(dice_count)):
    #             if dice_count[i] != 0:
    #                 player.potential_score += self.scoring_rules[(i + 1, dice_count[i])]
    #         self.reset_saved_dices()
    #         self.launch_dices()
    #         self.available_actions(player)

    # def available_actions(self, player: Player_v4):
    #     print("dices: ", self.dices_values)
    #     print("saved_dices: ", self.saved_dice)
    #     dice_count = self.available_dices_value_count()
    #     self.check_auto_reroll(player, dice_count)
    #     dices_values_without_saved_dices = self.dices_values_without_saved_dices()
    #     available_actions_mask = calculate_available_actions_mask(dice_count, dices_values_without_saved_dices)
    #     self.handle_dice_reset_and_reroll(player, dice_count, available_actions_mask)
    #     print("available_actions_mask:", available_actions_mask)
    #     return available_actions_mask
    #     # [1, 0, 0, 0, 0, 0]

    def handle_dice_reset_and_reroll(self, player, dice_count, available_actions_mask):
        # print("Entering handle_dice_reset_and_reroll")
        available_actions_without_zeros = [int(x) for x in available_actions_mask if x != 0]
        saved_dices_without_zeros = [int(x) for x in self.saved_dice if x != 0]

        if len(available_actions_without_zeros + saved_dices_without_zeros) == 6:
            for i in range(len(dice_count)):
                if dice_count[i] != 0:
                    player.potential_score += self.scoring_rules[(i + 1, dice_count[i])]
            self.reset_saved_dices()
            self.launch_dices()
            self.available_actions(player)
        # print("Exiting handle_dice_reset_and_reroll")

    def available_actions(self, player: Player_v4):
        # print("Entering available_actions")
        # print("dices: ", self.dices_values)
        # print("saved_dices: ", self.saved_dice)
        dice_count = self.available_dices_value_count()
        self.check_auto_reroll(player, dice_count)
        dices_values_without_saved_dices = self.dices_values_without_saved_dices()
        available_actions_mask = calculate_available_actions_mask(dice_count, dices_values_without_saved_dices)
        self.handle_dice_reset_and_reroll(player, dice_count, available_actions_mask)
        # print("calculate_available_actions_mask", available_actions_mask)
        # print("available_actions_mask:", available_actions_mask)
        # print("Exiting available_actions")
        return available_actions_mask

    def which_player(self):
        if self.player_turn == 0:
            return self.player_1
        else:
            return self.player_2

    # def find_possible_keys(self, available_actions_mask):
    #     new_mask = np.append(available_actions_mask, 1)
    #
    #     indices_ones = [i for i, x in enumerate(new_mask) if x == 1]
    #     indices_twos = [i for i, x in enumerate(new_mask) if x == 2]
    #
    #     # Utiliser un ensemble pour éviter les doublons dans les résultats
    #     result_set = set()
    #
    #     # Générer toutes les combinaisons pour les indices de `1`
    #     for combo_ones in product([0, 1], repeat=len(indices_ones)):
    #         # Appliquer chaque combinaison de `1` aux positions de `indices_ones`
    #         base_vector = new_mask[:]
    #         for idx, value in zip(indices_ones, combo_ones):
    #             base_vector[idx] = value
    #
    #         # Si `indices_twos` est vide, on n’a pas besoin de boucler sur `twos_option`
    #         twos_options = [2, 0] if indices_twos else [None]
    #
    #         for twos_option in twos_options:
    #             new_vector = base_vector[:]
    #             # Si `twos_option` est `None`, on saute la modification des `2`
    #             if twos_option is not None:
    #                 for idx in indices_twos:
    #                     new_vector[idx] = twos_option
    #
    #             # Vérifier qu'il y a au moins un `1` ou au moins un bloc de `2` complet
    #             if any(x == 1 for x in new_vector) or all(new_vector[i] == 2 for i in indices_twos):
    #                 # Créer une version transformée de `new_vector` où toutes les valeurs non nulles sont `1`
    #                 transformed_vector = tuple(np.where(new_vector != 0, 1, 0))  # Utiliser un tuple pour l'ensemble
    #
    #                 # Vérifier l'existence de `transformed_vector` dans `actions_dict` avant de l’ajouter
    #                 for key, value in self.actions_dict.items():
    #                     if np.array_equal(value, transformed_vector):
    #                         result_set.add(key)  # Ajout au set pour éviter les doublons
    #                         break
    #
    #     # Convertir l'ensemble en liste pour la sortie
    #     return list(result_set)

    def random_action(self, available_actions):
        return random.choice(self.available_action_keys_from_action[tuple(available_actions)])


    def step(self, action_key):
        player = self.which_player()
        if self.is_game_over:
            raise Exception("Game is over, please reset the game")

        if action_key in [0, 64]:
            self.end_turn_score(False, player)
            if self.player_turn == 1:
                player = self.which_player()
                self.launch_dices()
                random_action_key = self.random_action(self.available_actions(player))
                self.step(random_action_key)
            else:
                return
        for i in range(NUM_DICE):
            if self.actions_dict[action_key][i] == 1 and self.saved_dice[i] == 1:
                raise ValueError(f"Dice {i + 1} already saved, make another action")

        self.update_potential_score(action_key, player)

        if self.actions_dict[action_key][6] == 1:
            self.end_turn_score(True, player)
            if self.is_game_over:
                return
            if self.player_turn == 1:
                self.launch_dices()
                random_action_key = self.random_action(self.available_actions(player))
                self.step(random_action_key)

    def play_game_random(self):
        self.reset()
        while not self.is_game_over:
            self.launch_dices()
            # print(self.dices_values)
            player = self.which_player()
            # print(player)
            aa = self.available_actions(player)
            random_action = self.random_action(aa)
            # print('available_actions:', aa)
            # print('random_action:', random_action)
            self.step(random_action)
            # print('potential_score:', player.potential_score)
            # self.step(self.random_action(aa))
            # print("player_1 score: ", self.player_1.score)
            # print("player_2 score: ", self.player_2.score)